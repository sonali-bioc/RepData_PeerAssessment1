download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", f)
srcData <- read.csv(bzfile(f), header=TRUE,sep=",")
?bzfile
f <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", f)
srcData <- read.csv(unz(f), header=TRUE,sep=",")
?unz
f <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", f)
srcData <- read.csv(unz(filename=f), header=TRUE,sep=",")
f <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", f)
srcData <- read.csv(unz(description=file.path(paste0(getwd(),f)),filename=f), header=TRUE,sep=",")
file.path(paste0(getwd(),f)),filename=f)
file.path(paste0(getwd(),f))
f<- "activity.zip"
file.path(paste0(getwd(),f))
#f <- tempfile()
#download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", f)
srcData <- read.csv(unz(description=file.path(paste0(getwd(),f)),filename=f), header=TRUE,sep=",")
srcData <- read.csv(bzfile("activity.zip"))
data <- read.csv(bzfile("activity.zip"), header=TRUE,sep=",")
list.files()
data <- read.csv("activity.zip", header=TRUE,sep=",")
data
conn <- gzfile("activity.zip", "rt")
theData <- read.table(conn)
conn <- gzfile("activity.zip", "rt")
theData <- read.cvs(conn)
conn <- gzfile("activity.zip", "rt")
theData <- read.csv(conn)
theData
srcData <- read.csv(unz(description=file.path(paste0(getwd(),f)),filename=f), header=TRUE,sep=",")
srcData <- read.csv(unz(description=file.path(getwd(),f),filename=f), header=TRUE,sep=",")
srcData <- read.csv(unz(description=file.path(getwd(),f),filename="activity.csv"), header=TRUE,sep=",")
srcData
list.files()
data <- read.csv("activity.zip", header=TRUE,sep=",")
data <- read.csv(bzfile("activity.zip"), header=TRUE,sep=",")
conn <- gzfile("activity.zip", "rt")
theData <- read.csv(conn)
srcData <- read.csv(unz(description=file.path(getwd(),f),
filename="activity.csv"), header=TRUE,sep=",")
list.files()
data1 <- read.csv("activity.zip", header=TRUE,sep=",")
data2 <- read.csv(bzfile("activity.zip"), header=TRUE,sep=",")
conn <- gzfile("activity.zip", "rt")
data3 <- read.csv(conn)
data4 <- read.csv(unz(description=file.path(getwd(),f),
filename="activity.csv"), header=TRUE,sep=",")
rm(list=ls())
data4 <- read.csv(unz(description=file.path(getwd(),f),
filename="activity.csv"), header=TRUE,sep=",")
data4 <- read.csv(unz(description=file.path(getwd(),"activity.zip"),
filename="activity.csv"), header=TRUE,sep=",")
head(data3)
head(data4)
table(data4$steps)
rm(list=ls())
#load the data
data <- read.csv(unz(description=file.path(getwd(),"activity.zip"),
filename="activity.csv"), header=TRUE,sep=",")
# get rid of missing values to make plots
tempdata <- data[complete.cases(data),]
dim(tempdata)
dim(data)
hist(tempdata$steps)
head(tempdata)
unique(tempdata$date)
split(tempdata,"date")
?split
split(tempdata,as.factor(tempdata$date))
sp <- split(tempdata,as.factor(tempdata$date))
class(sp)
(sp[,1])
(sp[1])
sp <- split(data,as.factor(data$date))
sp[1]
sp <- split(tempdata,as.factor(tempdata$date))
sapply(sp, function(x){
length(x$steps)
})
sapply(sp, function(x){
mean <- ifelse(length(x$steps)==0,0,mean(x$steps))
median <- ifelse(length(x$steps)==0,0,median(x$steps))
c(mean, median)
})
?median
summary(sp)
sapply(sp,summary)
lapply(sp,summary)
class(sp[1]$steps)
class(sp[2]$steps)
class(sp)
class(sp[1])
sapply(sp[1],class)
?subset
sp <- split(tempdata,as.factor(tempdata$date))
sapply(sp, function(x){
mean <- ifelse(length(x$steps)==0,0,mean(x$steps))
median <- ifelse(length(x$steps)==0,0,median(x$steps))
c(mean, median)
})
res <- sapply(sp, function(x){
mean <- ifelse(length(x$steps)==0,0,mean(x$steps))
median <- ifelse(length(x$steps)==0,0,median(x$steps))
c(mean, median)
})
clas(res)
class(res)
as.data.frame(res)
t(as.data.frame(res))
rm(list=ls())
#load the data
data <- read.csv(unz(description=file.path(getwd(),"activity.zip"),
filename="activity.csv"), header=TRUE,sep=",")
# get rid of missing values to make plots
tempdata <- data[complete.cases(data),]
hist(tempdata$steps)
sp <- split(tempdata,as.factor(tempdata$date))
res <- sapply(sp, function(x){
mean <- ifelse(length(x$steps)==0,0,mean(x$steps))
median <- ifelse(length(x$steps)==0,0,median(x$steps))
c(mean, median)
})
t(as.data.frame(res))
head(data)
as.factor(tempdata$interval)
result <- tempdata[which(tempdata$interval==5),]
dim(result)
result
?aggregate
?aggregate(result,tempdata$date,mean )
aggregate(result,tempdata$date,mean )
aggregate(result,list(tempdata$date),mean )
aggregate(result,list(result$date),mean )
head(data)
aggregate(data,list(data$date),mean )
plot(rownames(agres),agres$steps)
agres<- aggregate(data,list(data$date),mean )
plot(rownames(agres),agres$steps)
agres<- aggregate(data,list(data$date),mean )
plot(rownames(agres),agres$steps,type="l",xlab="5 minute interval",
ylab="average no of steps averaged across all days")
warnings()
max(agres$steps)
max(agres$steps,na.omit=TRUE)
?MAX
?max
max(agres$steps,na.rm=TRUE)
subset
?subset
sp
t(as.data.frame(res))
plot(rownames(agres),agres[,1],type="l",xlab="5 minute interval",
ylab="average no of steps averaged across all days")
tempdata
sp[1:5]
lapply(sp,sum)
sp
res <- sapply(sp, function(x){
tot <- sum(x$steps)
mean <- ifelse(length(x$steps)==0,0,mean(x$steps))
median <- ifelse(length(x$steps)==0,0,median(x$steps))
c(mean, median)
})
sp <- split(tempdata,as.factor(tempdata$date))
res <- sapply(sp, function(x){
tot <- sum(x$steps)
mean <- ifelse(length(x$steps)==0,0,mean(x$steps))
median <- ifelse(length(x$steps)==0,0,median(x$steps))
c(tot, mean, median)
})
agres<- t(as.data.frame(res))
head(agres)
hist(agres[,1])
mean(agres[,1])
median(agres[,1])
sp <- split(tempdata,as.factor(tempdata$date))
res <- sapply(sp, function(x){
sum(x$steps)
})
agres
res
class(res)
hist(res)
hist(t(res))
hist(res)
names(res)
mean(res)
median(res)
rm(list=ls())
#load the data
data <- read.csv(unz(description=file.path(getwd(),"activity.zip"),
filename="activity.csv"), header=TRUE,sep=",")
tempdata <- data[complete.cases(data),]
sp <- split(tempdata,as.factor(tempdata$date))
res <- sapply(sp, function(x){
sum(x$steps)
})
hist(res)
mean(res)
median(res)
plot(rownames(agres),agres[,1],type="l",xlab="5 minute interval",
ylab="average no of steps averaged across all days")
res
sp2<- split(data,as.factor(data$interval))
sp2[1]
sp2[2]
res2 <- sapply(sp2, function(x){
mean(x$steps)
})
res2
?mean
res2 <- sapply(sp2, function(x){
mean(x$steps,na.rm=FALSE)
})
RES2
res2
res2 <- sapply(sp2, function(x){
mean(x$steps,na.rm=TRUE)
})
res2
plot(rownames(res2),res,type="l",xlab="5 minute interval",
ylab="average no of steps averaged across all days")
plot(rownames(res2),res2,type="l",xlab="5 minute interval",
ylab="average no of steps averaged across all days")
length(rownames(res2))
names(res2)
res2
as.numeric(res2)
length(as.numeric(res2))
length(names(res2))
plot(names(res2),res2,type="l",xlab="5 minute interval",
ylab="average no of steps averaged across all days")
plot(names(res2),res2,type="l",xlab="5 minute interval",
ylab="average no of steps averaged across all days", col="blue")
max(res2)
names(max(res2))
res2
class(res2)
names(res2)
avgstepsdf<- data.frame(interval=names(res2), avgsteps=avgsteps)
sp2<- split(data,as.factor(data$interval))
avgsteps <- sapply(sp2, function(x){
mean(x$steps,na.rm=TRUE)
})
avgstepsdf<- data.frame(interval=names(res2), avgsteps=avgsteps)
head(avgstepsdf)
max(avgstepsdf$svgsteps)
max(avgstepsdf$avgsteps)
avgstepsdf[which(max(avgstepsdf$avgsteps)),]
avgstepsdf[which(avgstepsdf$avgsteps==max(avgstepsdf$avgsteps)),]
with(avgstepsdf,
plot(interval,avgsteps,type="l",xlab="5 minute interval",
ylab="average no of steps averaged across all days", col="blue")
)
max(avgsteps)
which(avgsteps==max(avgsteps)
)
avgsteps[835]
avgsteps[104]
avgsteps
which(avgsteps==max(avgsteps)
)
class(which(avgsteps==max(avgsteps))
)
as.numeric(class(which(avgsteps==max(avgsteps))))
as.numeric(which(avgsteps==max(avgsteps)))
avgsteps(which(avgsteps==max(avgsteps)))
avgsteps[which(avgsteps==max(avgsteps))]
names(avgsteps(which(avgsteps==max(avgsteps))))
names(avgsteps[which(avgsteps==max(avgsteps))])
nrow(tempdata)
nrow(data)
nrow(data)-nrow(tempdata)
res2
avgdf
avgstepsdf
head(data,40)
data[which(data$steps==NA),]
data[which(is.na(data$steps)),]
nadata <- data[which(is.na(data$steps)),]
dim(nadata)
nrow(data)-nrow(tempdata)
nadata <- data[complete.cases(data),]
dim(nadata)
dim(tempdata)
nadata <- data[!complete.cases(data),]
dim(nadata)
nadata$steps
table(nadata$steps)
table(nadata$interval)
table(nadata$date)
head(avgstepsdf)
int <- 25
which(avgstepsdf==25)
avgstepsdf[which(avgstepsdf==25),]
avgstepsdf[which(avgstepsdf==25),]$avgsteps
nadata$interval[1]
nadata$interval[2]
nadata$interval[3]
nadata$steps[3]
for (i in 1:nrow(nadata)){
int <- nadata$interval[i]
nadata$steps[i] <- avgstepsdf[which(avgstepsdf==25),]$avgsteps
}
head(nadata)
for (i in 1:nrow(nadata)){
int <- nadata$interval[i]
nadata$steps[i] <- avgstepsdf[which(avgstepsdf==int),]$avgsteps
}
nadata <- data[!complete.cases(data),]
for (i in 1:nrow(nadata)){
int <- nadata$interval[i]
print(int)
print(avgstepsdf[which(avgstepsdf==int),]$avgsteps)
nadata$steps[i] <- avgstepsdf[which(avgstepsdf==int),]$avgsteps
}
tail(ndata)
tail(nadata)
source('~/.active-rstudio-document', echo=TRUE)
head(nadata)
source('~/.active-rstudio-document', echo=TRUE)
debugSource('~/GitHub/RepData_PeerAssessment1/test.R', echo=TRUE)
for (i in 1:nrow(nadata)){
int <- nadata$interval[i]
print(int)
print(avgstepsdf[which(avgstepsdf==int),]$avgsteps)
nadata$steps[i] <- avgstepsdf[which(avgstepsdf==int),]$avgsteps
}
warnings()
?match
match(nadata$interval, avgstepsdf$interval)
match( avgstepsdf$interval, nadata$inetrval
)
match( avgstepsdf$interval, nadata$interval
)
head(nadata)
(nadata)
?apply
apply(nrow(nadata), 1, function(x){
nadata$interval[i]
})
apply(nrow(nadata), 1, function(x){
x$interval[i]
})
apply(nrow(nadata), 1, function(x){
x$interval
})
apply(nrow(nadata), 1, function(x){
x
})
nrow(nadata)
apply(nadata, 1, function(x){
x
})
nadata <- data[!complete.cases(data),]
apply(nadata, 1, function(x){
x
})
apply(nadata, 1, function(x){
int <- as.numeric(x$interval)
match(int,avgstepsdf$inetrval)
})
apply(nadata, 1, function(x){
x[,"interval"]
##int <- as.numeric(x$interval)
##match(int,avgstepsdf$inetrval)
})
apply(nadata, 1, function(x){
x["interval"]
##int <- as.numeric(x$interval)
##match(int,avgstepsdf$inetrval)
})
apply(nadata, 1, function(x){
as.numeric(x["interval"])
##int <- as.numeric(x$interval)
##match(int,avgstepsdf$inetrval)
})
apply(nadata, 1, function(x){
int <- as.numeric(x["interval"])
match(int,avgstepsdf$inetrval)
})
apply(nadata, 1, function(x){
int <- as.numeric(x["interval"])
match(int,avgstepsdf$interval)
})
apply(nadata, 1, function(x){
int <- as.numeric(x["interval"])
avgstepsdf[match(int,avgstepsdf$interval),"avgsteps"]
})
nadata$steps <- apply(nadata, 1, function(x){
int <- as.numeric(x["interval"])
avgstepsdf[match(int,avgstepsdf$interval),"avgsteps"]
})
nadata <- data[!complete.cases(data),]
apply(nadata, 2, function(x) length(is.na(x)))
apply(nadata, 2, function(x) table(is.na(x)))
apply(nadata, 2, table)
dim(nadata)
dim(tempdatadata)
dim(tempdata)
cbind(tempdata,nadata)
rbind(tempdata,nadata)
hist(estimate1, xlab="Total no of steps taken each day",col="blue",
main="data with NA values removed")
hist(estimate2, xlab="Total no of steps taken each day",
main="data with NA values filled in", add=TRUE, col="green")
hist(estimate1, xlab="Total no of steps taken each day",col="blue",
main="data with NA values removed")
hist(estimate2, xlab="Total no of steps taken each day",
main="data with NA values filled in", add=TRUE, col="green")
calculate_histo_mean_meadian <-
function(df)
{
sp <- split(df,as.factor(df$date))
sapply(sp, function(x){
sum(x$steps)
})
}
estimate1 <- calculate_histo_mean_meadian(completedata)
hist(estimate1, xlab="Total no of steps taken each day",col="blue")
mean1 = mean(estimate1)
median1 = median(estimate1)
rm(list=ls())
#loading the data
data <- read.csv(unz(description=file.path(getwd(),"activity.zip"),
filename="activity.csv"), header=TRUE,sep=",")
```{r}
completedata <- data[complete.cases(data),]
nadata <- data[!complete.cases(data),]
calculate_histo_mean_meadian <-
function(df)
{
sp <- split(df,as.factor(df$date))
sapply(sp, function(x){
sum(x$steps)
})
}
estimate1 <- calculate_histo_mean_meadian(completedata)
hist(estimate1, xlab="Total no of steps taken each day",col="blue")
mean1 = mean(estimate1)
median1 = median(estimate1)
source('~/.active-rstudio-document', echo=TRUE)
hist(estimate1, xlab="Total no of steps taken each day",col="red",
main="data with NA values removed")
hist(estimate2, xlab="Total no of steps taken each day",
main="data with NA values filled in", add=TRUE, col="blue")
plot(density(estimate1))
lines(density(estimate2))
plot(density(estimate1),col="red")
lines(density(estimate2),col="blue", xlab="Total no of steps taken each day",
ylab="Frequency", main ="Comaprison of data without NA and data with
NA vlaues filled up")
plot(density(estimate2),col="red")
lines(density(estimate1),col="blue", xlab="Total no of steps taken each day",
ylab="Frequency", main ="Comaprison of data without NA and data with
NA vlaues filled up")
plot(density(estimate2),col="red", xlab="Total no of steps taken each day",
ylab="Frequency", main ="Comaprison of data without NA and data with
NA vlaues filled up")
lines(density(estimate1),col="blue")
?legend
plot(density(estimate2),col="red", xlab="Total no of steps taken each day",
ylab="Frequency", main ="Comaprison of data without NA and data with
NA vlaues filled up")
lines(density(estimate1),col="blue")
legend("topright",legend=c("w/o NA values","filled values"),
lty=1, col=c("red","blues"))
plot(density(estimate2),col="red", xlab="Total no of steps taken each day",
ylab="Frequency", main ="Comaprison of data without NA and data with
NA vlaues filled up")
lines(density(estimate1),col="blue")
legend("topright",legend=c("w/o NA values","filled values"),
lty=1, col=c("red","blue"), bty="n")
head(filleddata)
filleddata$day <- weekdays(as.Date(filleddata$date))
head(filleddata)
sapply(filleddata$day, function(x){
ifelse(x=="Saturday"|x=="Sunday",0,1)
} )
split(filleddata,as.factor(filleddata$weekst))
filleddata$weekst <- sapply(filleddata$day, function(x){
ifelse(x=="Saturday"|x=="Sunday",0,1)
})
split(filleddata,as.factor(filleddata$weekst))
spweek <- split(filleddata,as.factor(filleddata$weekst))
length(spweek)
splitbydate <- function(y){
sp2<- split(y,as.factor(y$interval))
sapply(sp2, function(x){
mean(x$steps,na.rm=TRUE)
})
}
weekend <- splitbydate(spweek[1])
weekday <- splitbydate(spweek[2])
weekend<- split(spweek[1],as.factor(spweek[1]$interval))
spweek[1]
spweek[1]$interval
spweek[1]
head(spweek[1])
names(spweek[1])
names(spweek[[1]])
sp2<- split(sp[[1]],as.factor(sp[[1]]$interval))
sapply(sp2, function(x){
mean(x$steps,na.rm=TRUE)
})
sp3<- split(sp[[2]],as.factor(sp[[2]]$interval))
weekday <-    sapply(sp3, function(x){
mean(x$steps,na.rm=TRUE)
})
